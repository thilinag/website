---
import type { CollectionEntry } from "astro:content";

import Layout from "./Layout.astro";
import Tags from "../components/Tags.astro";
import Tweets from "../components/Tweets.astro";
import type { MarkdownHeading } from "astro";
import TableOfContents from "../components/TableOfContents.astro";
import StructuredData from "../components/StructuredData.astro";
import Cover from "../components/Cover.astro";
import { getRelativeTime } from "../utils";

interface Props {
  data: CollectionEntry<"writing">["data"];
  headings: MarkdownHeading[];
}

const { data, headings } = Astro.props;
---

<Layout
  title={data.title}
  backLabel="All Writing"
  backURL="/writing/"
  description={data.description}
>
  <StructuredData data={data} />
  <article>
    <header>
      <h1>{data.title}</h1>
      <small class="meta">
        {data.author.split(" ")[0]} wrote this
        <time datetime={data.pubDate.toISOString()}>
          {getRelativeTime(data.pubDate.getTime())}</time
        >.
      </small>
      {
        data.coverChars && (
          <Cover coverChars={data.coverChars} seed={data.title} />
        )
      }
    </header>
    {
      data.toc && (
        <aside>
          <TableOfContents headings={headings} />
        </aside>
      )
    }
    <section class={!data.toc ? "full-width" : ""}>
      {data.tweets?.length && <Tweets tweets={data.tweets} />}
      <slot />
      <footer>
        {data.tags?.length && <Tags tags={data.tags} />}
      </footer>
    </section>
  </article>
</Layout>
<style>
  h1 {
    margin-bottom: 1rem;
  }

  .meta {
    display: block;
    margin-bottom: 2rem;
    color: var(--color-secondary);
  }

  article {
    /* display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 0 2rem;
    grid-auto-flow: dense; */
  }

  @media (min-width: 768px) {
    article {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 0 2rem;
      grid-auto-flow: dense;
    }
  }

  header {
    grid-column: 1/3;
  }

  aside {
    display: contents;
  }

  @media (min-width: 768px) {
    aside {
      grid-column: 2;
      display: block;
    }
  }

  .full-width {
    grid-column: 1/3;
  }
</style>
