---
import type { CollectionEntry } from "astro:content";
import { getRandomRange, shuffle } from "../utils";

export interface Props {
  coverChars: CollectionEntry<"writing">["data"]["coverChars"];
  seed: string;
}

const REPEAT_COUNT = 20;

const { coverChars = [], seed } = Astro.props;
const chars = coverChars.flatMap((char) => {
  const str = char.repeat(REPEAT_COUNT);
  const segmenter = new Intl.Segmenter("en", { granularity: "grapheme" });
  return [...segmenter.segment(str)].map(({ segment }) => segment);
});
const shuffledChars = shuffle(chars);
---

<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 1600 450"
  width="1600"
  height="450"
  class="cover"
  preserveAspectRatio="xMidYMid slice"
  role="presentation"
>
  {
    shuffledChars.map((char, index) => {
      const depth = Math.ceil(index / (shuffledChars.length / 5)) * 2;
      return (
        <text
          style={{
            transform: `translate(${getRandomRange(
              0,
              1600
            )}px, ${getRandomRange(0, 450)}px) rotate(${getRandomRange(
              -120,
              120
            )}deg)`,
            fontSize: `${depth + 1}rem`,
            filter: `blur(${depth % 10}px)`,
          }}
        >
          {char}
        </text>
      );
    })
  }
</svg>
<style>
  .cover {
    display: block;
    width: 100%;
    height: auto;
    filter: grayscale(1);
    border-radius: 1rem;
    margin-bottom: 2rem;
    aspect-ratio: 3/2;
    background-color: rgba(0, 0, 0, 0.1);
  }

  :global(.theme-dark) .cover {
    background-color: rgba(0, 0, 0, 0.2);
  }

  @media (min-width: 768px) {
    .cover {
      aspect-ratio: 16/5;
    }
  }

  text {
    fill: var(--color-secondary);
  }
</style>
