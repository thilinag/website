<button id='theme' type='button' aria-label='Switch colour scheme'>
  <span><i></i></span>
</button>
<script is:inline>
  const toggleButton = document.getElementById("theme");
  const getTheme = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }

    return "light";
  };
  const theme = getTheme();

  const setTheme = (theme) => {
    document.documentElement.classList.add(`theme-${theme}`);
    document.documentElement.classList.remove(
      `theme-${theme === "light" ? "dark" : "light"}`
    );
    toggleButton.setAttribute(
      "aria-label",
      `Switch to ${theme === "light" ? "Dark" : "Light"} Theme`
    );
    toggleButton.setAttribute(
      "title",
      `Switch to ${theme === "light" ? "Dark" : "Light"} Theme`
    );
  };

  if (theme === "light") {
    setTheme("light");
  } else {
    setTheme("dark");
  }

  toggleButton.addEventListener("click", (e) => {
    const theme = getTheme();
    if (theme === "light") {
      localStorage.setItem("theme", "dark");
      setTheme("dark");
    } else {
      localStorage.setItem("theme", "light");
      setTheme("light");
    }
  });
</script>
<style is:global>
  :root {
    --icon-transition: 0.6s cubic-bezier(0.63, -0.32, 0.32, 1.6);
  }

  .theme-dark {
    --color: #f5f5f5;
    --bg: #202124;
  }

  @media (prefers-color-scheme: light) {
    :root.theme-dark {
      --color: #f5f5f5;
      --bg: #202124;
    }
  }

  @media (prefers-color-scheme: dark) {
    :root.theme-light {
      --color: #202124;
      --bg: #f5f5f5;
    }
  }
</style>
<style>
  #theme {
    --size: 26px;
    border: 0;
    padding: 0;
    background: none;
    width: var(--size);
    display: flex;
    justify-content: center;
    align-items: center;
    margin-left: 1rem;
  }

  @media (min-width: calc(1000px + 5rem)) {
    #theme {
      position: fixed;
      top: 0;
      right: 2rem;
      z-index: 1;
      height: 51px;
    }
  }

  #theme:focus span {
    background: rgba(255, 255, 255, 0.1);
  }

  #theme:active span::before {
    transition: 0s;
    transform: rotate(135deg);
  }

  #theme:active span::after {
    transition: 0s;
    transform: rotate(180deg);
  }

  span {
    cursor: pointer;
    width: var(--size);
    height: var(--size);
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 50%;
  }

  span::before,
  span::after {
    content: "";
    width: 12px;
    aspect-ratio: 1/1;
    display: block;
    background: var(--color);
    position: absolute;
    transition: transform var(--icon-transition);
  }

  span::after {
    transform: rotate(45deg);
  }

  span i {
    border-radius: 50%;
    background: var(--bg);
    width: 8px;
    height: 8px;
    position: relative;
    z-index: 1;
  }

  span i::after {
    content: "";
    background: var(--color);
    width: 6px;
    height: 6px;
    border-radius: 50%;
    position: absolute;
    inset: 2px;
    left: -2px;
    transition: left 0.1s ease-in-out;
  }

  :global(.theme-dark) span i {
    width: 10px;
    height: 10px;
  }

  :global(.theme-dark) span i::after {
    left: 0;
    inset: 2px;
  }

  :global(.theme-dark) #theme:active span::before {
    transition: 0s;
    transform: rotate(-135deg);
  }

  :global(.theme-dark) #theme:active span::after {
    transition: 0s;
    transform: rotate(-180deg);
  }
</style>
