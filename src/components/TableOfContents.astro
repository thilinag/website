---
import type { MarkdownHeading } from "astro";
import { Icon } from "astro-icon";

export interface Props {
  headings: MarkdownHeading[];
}

const { headings } = Astro.props;

const structuredHeadings: Map<
  string,
  MarkdownHeading & { children?: MarkdownHeading[] }
> = new Map();
headings.forEach((heading) => {
  if (heading.depth === 2) {
    structuredHeadings.set(heading.slug, heading);
  }

  if (heading.depth === 3) {
    const [key, value] = [...structuredHeadings].at(-1)!;
    if (key && value) {
      structuredHeadings.set(key, {
        ...value,
        children: [...(value.children || []), heading],
      });
    }
  }
});
---

<div class="toc">
  <div class="toc-panel">
    <button type="button">
      <Icon name="mdi:table-of-contents" size="18" />
      <span>Contents</span>
    </button>
    <h3>Contents</h3>
    <ol class="index">
      {
        [...structuredHeadings.values()].map(({ slug, text, children }) => (
          <li>
            <a href={`#${slug}`}>{text}</a>.
            {children && (
              <ol>
                {children.map(({ slug, text }) => (
                  <li>
                    <a href={`#${slug}`}>{text}</a>.
                  </li>
                ))}
              </ol>
            )}
          </li>
        ))
      }
    </ol>
  </div>
</div>
<script is:inline>
  const $el = document.querySelector(".toc");
  const elHeight = $el.getBoundingClientRect().height;
  const observer = new IntersectionObserver(
    ([e]) => {
      console.log(e.intersectionRatio);
      e.target.classList.toggle("is-sticky", e.intersectionRatio === 0);
      if (e.intersectionRatio === 0) {
        $el.style.height = e.intersectionRatio === 0 ? `${elHeight}px` : "auto";
      }
    },
    { threshold: [0] }
  );

  observer.observe($el);
</script>
<style>
  .toc {
    margin-bottom: 2rem;
  }

  @media (min-width: 768px) {
    .toc {
      position: sticky;
      top: 7rem;
      padding-top: 0.5rem;
    }
  }

  .toc.is-sticky .toc-panel {
    position: fixed;
    top: 0;
    right: 0;
    left: 0;
    z-index: 10;
    pointer-events: none;
  }

  h3 {
    margin-top: 0;
    line-height: normal;
  }

  ol {
    counter-reset: item;
    padding-left: 0;
    margin: 0;
  }

  li {
    display: block;
  }

  li:before {
    content: counters(item, ".") ". ";
    counter-increment: item;
  }

  ol ol {
    padding-left: 2rem;
  }

  button {
    border: none;
    padding: 0;
    display: none;
    padding: 1.3rem 1rem;
    background: var(--bg);
    align-items: center;
    gap: 0.5rem;
    text-transform: uppercase;
    font-size: 1rem;
    width: 50%;
    pointer-events: auto;
  }

  .is-sticky .index {
    visibility: hidden;
    pointer-events: none;
  }

  .is-sticky h3 {
    display: none;
  }
  .is-sticky button {
    display: flex;
  }

  .is-sticky .toc-panel:focus-within .index {
    visibility: visible;
    pointer-events: auto;
    padding: 0 1rem 1rem;
    background: var(--bg);
  }
</style>
